using AutoMapper;
using FluentValidation;
using MediatR;
using Microsoft.Extensions.Logging;
using WorkoutReservation.Application.Common.Exceptions;
using WorkoutReservation.Application.Contracts;
using WorkoutReservation.Domain.Entities;
using WorkoutReservation.Domain.Extensions;

namespace WorkoutReservation.Application.Features.RepetitiveWorkouts.Commands.GenerateUpcomingWorkoutTimetable;

public record GenerateUpcomingWorkoutTimetableCommand(Guid? UserId) : IRequest;

internal sealed class GenerateUpcomingWorkoutTimetableCommandHandler : IRequestHandler<GenerateUpcomingWorkoutTimetableCommand>
{
    private readonly IRepetitiveWorkoutRepository _repetitiveRepository;
    private readonly IRealWorkoutRepository _realWorkoutRepository;
    private readonly IMapper _mapper;
    private readonly ILogger<GenerateUpcomingWorkoutTimetableCommandHandler> _logger;

    public GenerateUpcomingWorkoutTimetableCommandHandler(IRepetitiveWorkoutRepository repetitiveRepository,
        IRealWorkoutRepository realWorkoutRepository,
        IMapper mapper,
        ILogger<GenerateUpcomingWorkoutTimetableCommandHandler> logger)
    {
        _repetitiveRepository = repetitiveRepository;
        _realWorkoutRepository = realWorkoutRepository;
        _mapper = mapper;
        _logger = logger;
    }

    public async Task<Unit> Handle(GenerateUpcomingWorkoutTimetableCommand request, CancellationToken token)
    {
        var repetitiveWorkouts = await _repetitiveRepository.GetAllAsync(token);
        if (!repetitiveWorkouts.Any())
        {
            _logger.LogWarning("Repetitive workouts not found. No new workout week has been generated.");
            throw new NotFoundException("Repetitive workouts not found.");
        }
        var convertedWorkouts = _mapper.Map<List<RepetitiveWorkoutToRealWorkoutDto>>(repetitiveWorkouts);
        var firstDayOfUpcomingWeek = DateTime.Now.GetFirstDayOfWeekAndAddDays(7);
        
        convertedWorkouts.ForEach(workout => SetDayOfWeek(workout, firstDayOfUpcomingWeek));
        
        var newRealWorkouts = convertedWorkouts.Select(x => new RealWorkout
        {
            StartTime = x.StartTime,
            EndTime = x.EndTime,
            InstructorId = x.InstructorId,
            WorkoutTypeId = x.WorkoutTypeId,
            MaxParticipantNumber = x.MaxParticipantNumber,
            Date = x.Date,
            CurrentParticipantNumber = 0,
            IsAutoGenerated = request.UserId is null,
            CreatedDate = DateTime.Now,
            CreatedBy = request.UserId is null ? null : request.UserId.ToString()
        })
        .ToList();

        var existingRealWorkouts = await _realWorkoutRepository
            .GetAllFromDateRangeAsync(firstDayOfUpcomingWeek, firstDayOfUpcomingWeek.AddDays(7), true, token);
        
        var validator = new GenerateUpcomingWorkoutTimetableCommandValidator(newRealWorkouts, existingRealWorkouts);
        await validator.ValidateAndThrowAsync(request, token);

        await _realWorkoutRepository.AddAsync(newRealWorkouts, token);
        _logger.LogInformation("The method generating a new weekly workout plan has been called");
        return Unit.Value;
    }

    private static void SetDayOfWeek(RepetitiveWorkoutToRealWorkoutDto workout, DateOnly firstDayOfUpcomingWeek)
    {
        workout.Date = workout.DayOfWeek switch
        {
            DayOfWeek.Monday => firstDayOfUpcomingWeek,
            DayOfWeek.Tuesday => firstDayOfUpcomingWeek.AddDays(1),
            DayOfWeek.Wednesday => firstDayOfUpcomingWeek.AddDays(2),
            DayOfWeek.Thursday => firstDayOfUpcomingWeek.AddDays(3),
            DayOfWeek.Friday => firstDayOfUpcomingWeek.AddDays(4),
            DayOfWeek.Saturday => firstDayOfUpcomingWeek.AddDays(5),
            DayOfWeek.Sunday => firstDayOfUpcomingWeek.AddDays(6),
            _ => workout.Date
        };
    }
}
