using WorkoutReservation.Domain.Abstractions;
using WorkoutReservation.Domain.Enums;
using WorkoutReservation.Domain.Events;
using WorkoutReservation.Domain.Exceptions;
using WorkoutReservation.Shared.TypesExtensions;

namespace WorkoutReservation.Domain.Entities;

public sealed class RealWorkout : Entity
{
    public int Id { get; private set; }
    public DateOnly Date { get; private set; }
    public TimeOnly StartTime { get; private set; }
    public TimeOnly EndTime { get; private set; }
    public int MaxParticipantNumber { get; private set; }
    public int CurrentParticipantNumber { get; private set; }
    public bool IsAutoGenerated { get; private set; }
    public WorkoutType WorkoutType { get; private set; }
    public Instructor Instructor { get; private set; }
    public ICollection<Reservation> Reservations { get; private set; } = new List<Reservation>();

    private RealWorkout()
    {
        // required for EF Core
    }
    
    public RealWorkout(int maxParticipantNumber, TimeOnly startTime, TimeOnly endTime, 
        WorkoutType workoutType, Instructor instructor, DateOnly date, bool isAutoGenerated) 
    {
        MaxParticipantNumber = maxParticipantNumber;
        StartTime = startTime;
        EndTime = endTime;
        WorkoutType = workoutType;
        Instructor = instructor;
        Date = date;
        IsAutoGenerated = isAutoGenerated;        
        CurrentParticipantNumber = 0;
        Valid();
    }

    public void Update(int maxParticipantNumber, DateOnly date, TimeOnly startTime, 
        TimeOnly endTime, Instructor instructor)
    {
        MaxParticipantNumber = maxParticipantNumber;
        Date = date;
        StartTime = startTime;
        EndTime = endTime;
        Instructor = instructor;
        Valid();
    }
    
    public void AddReservation(ApplicationUser user, DateTime now)
    {
        if (Date <= DateOnly.FromDateTime(now) && EndTime < TimeOnly.FromDateTime(now))
            throw new RealWorkoutAlreadyStartedException(Id);

        Reservations.Add(new Reservation(this, user));
        IncrementCurrentParticipantNumber();
        Valid();
    }

    public void CancelReservation(Reservation reservation, DateTime now)
    {
        if (reservation is null)
            throw new ReservationCannotBeNullException();

        if (reservation.ReservationStatus == ReservationStatus.Cancelled)
            throw new ReservationAlreadyCancelledException();

        if (Date <= DateOnly.FromDateTime(now) && EndTime < TimeOnly.FromDateTime(now))
            throw new RealWorkoutAlreadyStartedException(Id);
        
        reservation.SetReservationStatus(ReservationStatus.Cancelled);
        DecrementCurrentParticipantNumber();
        AddDomainEvent(new ReservationCancelledEvent(reservation.Id));
        Valid();
    }

    public void UpdateReservation(Reservation reservation, ReservationStatus newStatus, string note)
    {
        switch (reservation.ReservationStatus)
        {
            case ReservationStatus.Cancelled when newStatus == ReservationStatus.Reserved:
                IncrementCurrentParticipantNumber();
                reservation.SetReservationStatus(newStatus);
                break;
            case ReservationStatus.Reserved when newStatus == ReservationStatus.Cancelled:
                DecrementCurrentParticipantNumber();
                reservation.SetReservationStatus(newStatus);
                break;
        }

        reservation.SetNote(note);
        Valid();
    }

    protected override void Valid()
    {
        if (MaxParticipantNumber <= 0)
            throw new MaxParticipantNumberLessOrEqualZeroException();

        if (StartTime > EndTime)
            throw new StartTimeGreaterThanEndTimeException(StartTime, EndTime);

        if (WorkoutType is null)
            throw new WorkoutTypeCannotBeNullException();

        if (Instructor is null)
            throw new InstructorCannotBeNullException();

        if (CurrentParticipantNumber > MaxParticipantNumber)
            throw new ParticipantNumberExceedException(CurrentParticipantNumber, MaxParticipantNumber);

        if (CurrentParticipantNumber < 0)
            throw new CurrentParticipantNumberLessThanZeroException(CurrentParticipantNumber);

        if (Date > DateTime.Now.GetLastDayOfUpcomingWeek())
            throw new RealWorkoutDateExceededException();

        if (IsAnyUserHasMoreThanOneActiveReservation())
            throw new DuplicateReservationException();

        if (Reservations.Count < 0)
            throw new ReservationsLessThanZeroException();
    }
    
    private bool IsAnyUserHasMoreThanOneActiveReservation()
    {
        var reservationsDistinctByUser = Reservations
            .Where(r => r.ReservationStatus == ReservationStatus.Reserved)
            .DistinctBy(r => r.User.Id)
            .ToList();

        var reservations = Reservations
            .Where(r => r.ReservationStatus == ReservationStatus.Reserved)
            .ToList();
        
        return reservationsDistinctByUser.Count != reservations.Count;
    }

    private void IncrementCurrentParticipantNumber()
    {
        CurrentParticipantNumber++;
        Valid();
    }
    
    private void DecrementCurrentParticipantNumber()
    {
        CurrentParticipantNumber--;
        Valid();
    }
}
