using WorkoutReservation.Domain.Abstractions;
using WorkoutReservation.Domain.Enums;
using WorkoutReservation.Domain.Exceptions;
using WorkoutReservation.Domain.Extensions;

namespace WorkoutReservation.Domain.Entities;

public sealed class RealWorkout : BaseWorkout
{
    public DateOnly Date { get; private set; }
    public int CurrentParticipantNumber { get; private set; }
    public bool IsAutoGenerated { get; private set; }
    public ICollection<Reservation> Reservations { get; private set; } = new List<Reservation>();

    private RealWorkout()
    {
        // required for EF Core
    }
    
    public RealWorkout(int maxParticipantNumber, TimeOnly startTime, TimeOnly endTime, 
        WorkoutType workoutType, Instructor instructor, DateOnly date, bool isAutoGenerated) 
        : base(maxParticipantNumber, startTime, endTime, workoutType, instructor)
    {
        Date = date;
        CurrentParticipantNumber = 0;
        IsAutoGenerated = isAutoGenerated;
        Valid();
    }

    public void Update(int maxParticipantNumber, DateOnly date, TimeOnly startTime, 
        TimeOnly endTime, Instructor instructor)
    {
        MaxParticipantNumber = maxParticipantNumber;
        Date = date;
        StartTime = startTime;
        EndTime = endTime;
        AddInstructor(instructor);
        Valid();
    }
    
    public void AddReservation(ApplicationUser user)
    {
        ThrowIfRealWorkoutStarted();
        Reservations.Add(new Reservation(this, user));
        IncrementCurrentParticipantNumber();
        Valid();
    }

    public void CancelReservation(Reservation reservation, ApplicationUser user)
    {
        if (reservation is null)
            throw new DomainException(this, nameof(Reservations), ExceptionCode.NotExists);

        if (reservation.ReservationStatus == ReservationStatus.Cancelled)
            throw new DomainException(this, nameof(Reservations), ExceptionCode.CannotBeOverwritten);
        
        ThrowIfRealWorkoutStarted();
        
        reservation.SetReservationStatus(ReservationStatus.Cancelled);
        DecrementCurrentParticipantNumber();
        Valid();
    }

    public void UpdateReservation(Reservation reservation, ReservationStatus newStatus, string note)
    {
        switch (reservation.ReservationStatus)
        {
            case ReservationStatus.Cancelled when newStatus == ReservationStatus.Reserved:
                IncrementCurrentParticipantNumber();
                reservation.SetReservationStatus(newStatus);
                break;
            case ReservationStatus.Reserved when newStatus == ReservationStatus.Cancelled:
                DecrementCurrentParticipantNumber();
                reservation.SetReservationStatus(newStatus);
                break;
        }

        reservation.SetNote(note);
        Valid();
    }

    protected override void Valid()
    {
        if (CurrentParticipantNumber > MaxParticipantNumber)
            throw new DomainException(this, nameof(CurrentParticipantNumber), ExceptionCode.ValueToLarge);

        if (CurrentParticipantNumber < 0)
            throw new DomainException(this, nameof(CurrentParticipantNumber), ExceptionCode.ValueToSmall);

        if (Date < DateOnly.FromDateTime(DateTime.Now) && 
            Date > DateTime.Now.GetFirstDayOfWeekAndAddDays(13))
            throw new DomainException(this, nameof(Date), ExceptionCode.ValueOutOfRange);
        
        if (Reservations.Count(r => r.ReservationStatus == ReservationStatus.Reserved) != 
            Reservations.Where(r => r.ReservationStatus == ReservationStatus.Reserved).DistinctBy(r => r.UserId).Count())
            throw new DomainException(this, nameof(Reservations), ExceptionCode.AlreadyExists);
    }
    
    //TODO check this statement
    private void ThrowIfRealWorkoutStarted()
    {
        if (Date <= DateOnly.FromDateTime(DateTime.Now.Date) && EndTime < TimeOnly.FromDateTime(DateTime.Now))
        {
            throw new DomainException(this, nameof(EndTime), ExceptionCode.ValueToLarge);
        }
    }

    private void IncrementCurrentParticipantNumber()
    {
        CurrentParticipantNumber++;
        Valid();
    }
    
    private void DecrementCurrentParticipantNumber()
    {
        CurrentParticipantNumber--;
        Valid();
    }
}
